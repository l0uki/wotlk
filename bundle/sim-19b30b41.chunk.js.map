{"version":3,"file":"sim-19b30b41.chunk.js","sources":["../../../ui/balance_druid/inputs.ts","../../../ui/balance_druid/presets.ts","../../../ui/balance_druid/sim.ts"],"sourcesContent":["import { BalanceDruid_Options as DruidOptions, BalanceDruid_Rotation_Type as RotationType } from '../core/proto/druid.js';\nimport { RaidTarget } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { NO_TARGET } from '../core/proto_utils/utils.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\nimport { Sim } from '../core/sim.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\nimport { Target } from '../core/target.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const SelfInnervate = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecBalanceDruid>({\n    fieldName: 'innervateTarget',\n    id: ActionId.fromSpellId(29166),\n    extraCssClasses: [\n        'within-raid-sim-hide',\n    ],\n    getValue: (player: Player<Spec.SpecBalanceDruid>) => player.getSpecOptions().innervateTarget?.targetIndex != NO_TARGET,\n    setValue: (eventID: EventID, player: Player<Spec.SpecBalanceDruid>, newValue: boolean) => {\n        const newOptions = player.getSpecOptions();\n        newOptions.innervateTarget = RaidTarget.create({\n            targetIndex: newValue ? 0 : NO_TARGET,\n        });\n        player.setSpecOptions(eventID, newOptions);\n    },\n});\n\nexport const BalanceDruidRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBalanceDruid, RotationType>({\n\t\t\tfieldName: 'type',\n\t\t\tlabel: 'Type',\n\t\t\tlabelTooltip: 'If set to \\'Adaptive\\', will dynamically adjust rotation.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Adaptive', value: RotationType.Adaptive },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'useBattleRes',\n\t\t\tlabel: 'Use Battle Res',\n\t\t\tlabelTooltip: 'Cast Battle Res on an ally sometime during the encounter.',\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'useMf',\n\t\t\tlabel: 'Use Moonfire',\n\t\t\tlabelTooltip: 'Should the rotation use Moonfire.',\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'useIs',\n\t\t\tlabel: 'Use Insect Swarm',\n\t\t\tlabelTooltip: 'Should the rotation use Insect Swarm.',\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'mfInsideEclipseThreshold',\n\t\t\tlabel: 'Moonfire inside eclipse max timing',\n\t\t\tlabelTooltip: 'Max eclipse uptime at which Moonfire can be applied/refreshed. 15 = never refresh,  0= always refresh.',\n\t\t\tenableWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().useMf,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'isInsideEclipseThreshold',\n\t\t\tlabel: 'Insect Swarm inside eclipse max timing',\n\t\t\tlabelTooltip: 'Max eclipse uptime at which Insect Swarm can be applied/refreshed. 15 = never refresh,  0= always refresh.',\n\t\t\tenableWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().useIs,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'mcdInsideLunarThreshold',\n\t\t\tlabel: 'CDs inside lunar eclipse max timing',\n\t\t\tlabelTooltip: 'Maximum lunar eclipse uptime at which major cooldowns can be used. 15 = right on proc,  0 = deactivated.',\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'mcdInsideSolarThreshold',\n\t\t\tlabel: 'CDs inside solar eclipse max timing',\n\t\t\tlabelTooltip: 'Maximum solar eclipse uptime at which major cooldowns can be used. 15 = right on proc,  0 = deactivated.',\n\t\t}),\n\t],\n};\n","import {\n    Consumes,\n    Debuffs, Glyphs,\n    IndividualBuffs,\n    PartyBuffs,\n    RaidBuffs,\n    RaidTarget,\n    TristateEffect\n} from '../core/proto/common.js';\nimport {Flask} from '../core/proto/common.js';\nimport {Food} from '../core/proto/common.js';\nimport {EquipmentSpec} from '../core/proto/common.js';\nimport {Potions} from '../core/proto/common.js';\nimport {SavedTalents} from '../core/proto/ui.js';\n\nimport {\n    BalanceDruid_Rotation as BalanceDruidRotation,\n    BalanceDruid_Options as BalanceDruidOptions,\n    BalanceDruid_Rotation_Type as RotationType, DruidMajorGlyph, DruidMinorGlyph,\n} from '../core/proto/druid.js';\n\nimport * as Tooltips from '../core/constants/tooltips.js';\nimport {NO_TARGET} from \"../core/proto_utils/utils\";\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const StandardTalents = {\n    name: 'Phase 1',\n    data: SavedTalents.create({\n        talentsString: '5032003115331303213305311231--205003012',\n        glyphs: Glyphs.create({\n            major1: DruidMajorGlyph.GlyphOfFocus,\n            major2: DruidMajorGlyph.GlyphOfInsectSwarm,\n            major3: DruidMajorGlyph.GlyphOfStarfall,\n            minor1: DruidMinorGlyph.GlyphOfTyphoon,\n            minor2: DruidMinorGlyph.GlyphOfUnburdenedRebirth,\n            minor3: DruidMinorGlyph.GlyphOfTheWild,\n        }),\n    }),\n};\n\nexport const DefaultRotation = BalanceDruidRotation.create({\n    type: RotationType.Adaptive,\n    useBattleRes: true,\n    isInsideEclipseThreshold: 15,\n    mfInsideEclipseThreshold: 14,\n    useIs: false,\n    useMf: true,\n});\n\nexport const DefaultOptions = BalanceDruidOptions.create({\n    innervateTarget: RaidTarget.create({\n        targetIndex: NO_TARGET,\n    }),\n});\n\nexport const DefaultConsumes = Consumes.create({\n    defaultPotion: Potions.PotionOfSpeed,\n    flask: Flask.FlaskOfTheFrostWyrm,\n    food: Food.FoodFishFeast,\n    prepopPotion: Potions.PotionOfSpeed,\n    thermalSapper: true,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n    arcaneBrilliance: true,\n    bloodlust: true,\n    divineSpirit: true,\n    giftOfTheWild: TristateEffect.TristateEffectImproved,\n    icyTalons: true,\n    moonkinAura: TristateEffect.TristateEffectImproved,\n    leaderOfThePack: TristateEffect.TristateEffectImproved,\n    powerWordFortitude: TristateEffect.TristateEffectImproved,\n    sanctifiedRetribution: true,\n    strengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n    trueshotAura: true,\n    wrathOfAirTotem: true,\n});\n\nexport const DefaultIndividualBuffs = IndividualBuffs.create({\n    blessingOfKings: true,\n    blessingOfMight: TristateEffect.TristateEffectImproved,\n    blessingOfWisdom: TristateEffect.TristateEffectImproved,\n    vampiricTouch: true,\n});\n\nexport const DefaultPartyBuffs = PartyBuffs.create({\n    heroicPresence: false,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n    bloodFrenzy: true,\n    ebonPlaguebringer: true,\n    faerieFire: TristateEffect.TristateEffectImproved,\n    heartOfTheCrusader: true,\n    judgementOfWisdom: true,\n    shadowMastery: true,\n    sunderArmor: true,\n    totemOfWrath: true,\n});\n\nexport const P1_PRESET = {\n    name: 'P1 Preset',\n    tooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n    gear: EquipmentSpec.fromJsonString(`{\"items\": [\n         {\n          \"id\": 40467,\n          \"enchant\": 44877,\n          \"gems\": [\n            41285,\n            39998\n          ]\n        },\n        {\n          \"id\": 44661,\n          \"gems\": [\n            40026\n          ]\n        },\n        {\n          \"id\": 40470,\n          \"enchant\": 44874,\n          \"gems\": [\n            39998\n          ]\n        },\n        {\n          \"id\": 40405,\n          \"enchant\": 44472\n        },\n        {\n          \"id\": 40469,\n          \"enchant\": 44489,\n          \"gems\": [\n            39998,\n            40026\n          ]\n        },\n        {\n          \"id\": 44008,\n          \"enchant\": 44498,\n          \"gems\": [\n            39998,\n            0\n          ]\n        },\n        {\n          \"id\": 40466,\n          \"enchant\": 54999,\n          \"gems\": [\n            39998,\n            0\n          ]\n        },\n        {\n          \"id\": 40561,\n          \"enchant\": 54793,\n          \"gems\": [\n            39998\n          ]\n        },\n        {\n          \"id\": 40560,\n          \"enchant\": 41602\n        },\n        {\n          \"id\": 40558,\n          \"enchant\": 55016\n        },\n        {\n          \"id\": 40399\n        },\n        {\n          \"id\": 40080\n        },\n        {\n          \"id\": 40255\n        },\n        {\n          \"id\": 40432\n        },\n        {\n          \"id\": 40395,\n          \"enchant\": 44487\n        },\n        {\n          \"id\": 40192\n        },\n        {\n          \"id\": 40321\n        }\n    ]}`),\n};\n\nexport const PRE_RAID_PRESET = {\n    name: 'Pre-raid Preset',\n    tooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n    gear: EquipmentSpec.fromJsonString(`{\"items\": [\n          {\n          \"id\": 42554,\n          \"enchant\": 44877,\n          \"gems\": [\n            41285,\n            40048\n          ]\n        },\n        {\n          \"id\": 40680\n        },\n        {\n          \"id\": 37673,\n          \"enchant\": 44874,\n          \"gems\": [\n            39998\n          ]\n        },\n        {\n          \"id\": 41610,\n          \"enchant\": 44472\n        },\n        {\n          \"id\": 39547,\n          \"enchant\": 44489,\n          \"gems\": [\n            39998,\n            40026\n          ]\n        },\n        {\n          \"id\": 37696,\n          \"enchant\": 44498,\n          \"gems\": [\n            0\n          ]\n        },\n        {\n          \"id\": 39544,\n          \"enchant\": 54999,\n          \"gems\": [\n            39998,\n            0\n          ]\n        },\n        {\n          \"id\": 40696,\n          \"enchant\": 54793,\n          \"gems\": [\n            40048,\n            39998\n          ]\n        },\n        {\n          \"id\": 37791,\n          \"enchant\": 41602\n        },\n        {\n          \"id\": 44202,\n          \"enchant\": 55016,\n          \"gems\": [\n            39998\n          ]\n        },\n        {\n          \"id\": 40585\n        },\n        {\n          \"id\": 43253,\n          \"gems\": [\n            40026\n          ]\n        },\n        {\n          \"id\": 37873\n        },\n        {\n          \"id\": 42987\n        },\n        {\n          \"id\": 45085,\n          \"enchant\": 44487\n        },\n        {\n          \"id\": 40698\n        },\n        {\n          \"id\": 32387\n        }\n    ]}`),\n};\n\n","import { RaidBuffs } from '../core/proto/common.js';\nimport { PartyBuffs } from '../core/proto/common.js';\nimport { IndividualBuffs } from '../core/proto/common.js';\nimport { Debuffs } from '../core/proto/common.js';\nimport { Class } from '../core/proto/common.js';\nimport { Consumes } from '../core/proto/common.js';\nimport { Encounter } from '../core/proto/common.js';\nimport { ItemSlot } from '../core/proto/common.js';\nimport { MobType } from '../core/proto/common.js';\nimport { RaidTarget } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Stat } from '../core/proto/common.js';\nimport { TristateEffect } from '../core/proto/common.js'\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { Player } from '../core/player.js';\nimport { Sim } from '../core/sim.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\n\nimport { BalanceDruid, BalanceDruid_Rotation as BalanceDruidRotation, DruidTalents as DruidTalents, BalanceDruid_Options as BalanceDruidOptions } from '../core/proto/druid.js';\n\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Tooltips from '../core/constants/tooltips.js';\n\nimport * as DruidInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nexport class BalanceDruidSimUI extends IndividualSimUI<Spec.SpecBalanceDruid> {\n    constructor(parentElem: HTMLElement, player: Player<Spec.SpecBalanceDruid>) {\n        super(parentElem, player, {\n            cssClass: 'balance-druid-sim-ui',\n            // List any known bugs / issues here and they'll be shown on the site.\n            knownIssues: [\n            ],\n\n            // All stats for which EP should be calculated.\n            epStats: [\n                Stat.StatIntellect,\n                Stat.StatSpirit,\n                Stat.StatSpellPower,\n                Stat.StatArcaneSpellPower,\n                Stat.StatNatureSpellPower,\n                Stat.StatSpellHit,\n                Stat.StatSpellCrit,\n                Stat.StatSpellHaste,\n                Stat.StatMP5,\n            ],\n            // Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n            epReferenceStat: Stat.StatSpellPower,\n            // Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n            displayStats: [\n                Stat.StatHealth,\n                Stat.StatStamina,\n                Stat.StatIntellect,\n                Stat.StatSpirit,\n                Stat.StatSpellPower,\n                Stat.StatArcaneSpellPower,\n                Stat.StatNatureSpellPower,\n                Stat.StatSpellHit,\n                Stat.StatSpellCrit,\n                Stat.StatSpellHaste,\n                Stat.StatMP5,\n            ],\n\n\t\t\tdefaults: {\n\t\t\t\t// Default equipped gear.\n                gear: Presets.PRE_RAID_PRESET.gear,\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\n\t\t\t\tepWeights: Stats.fromMap({\n\t\t\t\t\t[Stat.StatIntellect]: 0.52,\n\t\t\t\t\t[Stat.StatSpirit]: 0.3,\n\t\t\t\t\t[Stat.StatSpellPower]: 1,\n\t\t\t\t\t[Stat.StatArcaneSpellPower]: 0.45,\n\t\t\t\t\t[Stat.StatNatureSpellPower]: 0.50,\n\t\t\t\t\t[Stat.StatSpellCrit]: 0.61,\n\t\t\t\t\t[Stat.StatSpellHaste]: 0.67,\n\t\t\t\t\t[Stat.StatMP5]: 0.00,\n\t\t\t\t}),\n\t\t\t\t// Default consumes settings.\n\t\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\t\t// Default rotation settings.\n\t\t\t\trotation: Presets.DefaultRotation,\n\t\t\t\t// Default talents.\n\t\t\t\ttalents: Presets.StandardTalents.data,\n\t\t\t\t// Default spec-specific settings.\n\t\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\t\t// Default raid/party buffs settings.\n\t\t\t\traidBuffs: Presets.DefaultRaidBuffs,\n\n\t\t\t\tpartyBuffs: Presets.DefaultPartyBuffs,\n\n\t\t\t\tindividualBuffs: Presets.DefaultIndividualBuffs,\n\n\t\t\t\tdebuffs: Presets.DefaultDebuffs,\n\t\t\t},\n\n            // IconInputs to include in the 'Player' section on the settings tab.\n            playerIconInputs: [\n                DruidInputs.SelfInnervate,\n            ],\n            // Inputs to include in the 'Rotation' section on the settings tab.\n            rotationInputs: DruidInputs.BalanceDruidRotationConfig,\n            // Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n            includeBuffDebuffInputs: [\n                IconInputs.MeleeHasteBuff,\n                IconInputs.MeleeCritBuff,\n                IconInputs.AttackPowerPercentBuff,\n                IconInputs.AttackPowerBuff,\n                IconInputs.MajorArmorDebuff,\n                IconInputs.MinorArmorDebuff,\n                IconInputs.PhysicalDamageDebuff,\n            ],\n            excludeBuffDebuffInputs: [\n            ],\n            // Inputs to include in the 'Other' section on the settings tab.\n            otherInputs: {\n                inputs: [\n                    OtherInputs.TankAssignment,\n                ],\n            },\n            encounterPicker: {\n                // Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n                showExecuteProportion: false,\n            },\n\n\t\t\tpresets: {\n\t\t\t\t// Preset talents that the user can quickly select.\n\t\t\t\ttalents: [\n\t\t\t\t\tPresets.StandardTalents,\n\t\t\t\t],\n\t\t\t\t// Preset gear configurations that the user can quickly select.\n\t\t\t\tgear: [\n\t\t\t\t\tPresets.P1_PRESET,\n                    Presets.PRE_RAID_PRESET,\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t}\n}\n"],"names":["SelfInnervate","InputHelpers.makeSpecOptionsBooleanIconInput","fieldName","id","ActionId","fromSpellId","extraCssClasses","getValue","player","getSpecOptions","innervateTarget","targetIndex","NO_TARGET","setValue","eventID","newValue","newOptions","RaidTarget","create","setSpecOptions","BalanceDruidRotationConfig","inputs","InputHelpers.makeRotationEnumInput","label","labelTooltip","values","name","value","RotationType","Adaptive","InputHelpers.makeRotationBooleanInput","InputHelpers.makeRotationNumberInput","enableWhen","getRotation","useMf","useIs","StandardTalents","data","SavedTalents","talentsString","glyphs","Glyphs","major1","DruidMajorGlyph","GlyphOfFocus","major2","GlyphOfInsectSwarm","major3","GlyphOfStarfall","minor1","DruidMinorGlyph","GlyphOfTyphoon","minor2","GlyphOfUnburdenedRebirth","minor3","GlyphOfTheWild","DefaultRotation","BalanceDruidRotation","type","useBattleRes","isInsideEclipseThreshold","mfInsideEclipseThreshold","DefaultOptions","BalanceDruidOptions","DefaultConsumes","Consumes","defaultPotion","Potions","PotionOfSpeed","flask","Flask","FlaskOfTheFrostWyrm","food","Food","FoodFishFeast","prepopPotion","thermalSapper","DefaultRaidBuffs","RaidBuffs","arcaneBrilliance","bloodlust","divineSpirit","giftOfTheWild","TristateEffect","TristateEffectImproved","icyTalons","moonkinAura","leaderOfThePack","powerWordFortitude","sanctifiedRetribution","strengthOfEarthTotem","trueshotAura","wrathOfAirTotem","DefaultIndividualBuffs","IndividualBuffs","blessingOfKings","blessingOfMight","blessingOfWisdom","vampiricTouch","DefaultPartyBuffs","PartyBuffs","heroicPresence","DefaultDebuffs","Debuffs","bloodFrenzy","ebonPlaguebringer","faerieFire","heartOfTheCrusader","judgementOfWisdom","shadowMastery","sunderArmor","totemOfWrath","P1_PRESET","tooltip","Tooltips.BASIC_BIS_DISCLAIMER","gear","EquipmentSpec","fromJsonString","PRE_RAID_PRESET","BalanceDruidSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","knownIssues","epStats","Stat","StatIntellect","StatSpirit","StatSpellPower","StatArcaneSpellPower","StatNatureSpellPower","StatSpellHit","StatSpellCrit","StatSpellHaste","StatMP5","epReferenceStat","displayStats","StatHealth","StatStamina","defaults","Presets.PRE_RAID_PRESET","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultRotation","talents","Presets.StandardTalents","specOptions","Presets.DefaultOptions","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","Presets.DefaultPartyBuffs","individualBuffs","Presets.DefaultIndividualBuffs","debuffs","Presets.DefaultDebuffs","playerIconInputs","DruidInputs.SelfInnervate","rotationInputs","DruidInputs.BalanceDruidRotationConfig","includeBuffDebuffInputs","IconInputs.MeleeHasteBuff","IconInputs.MeleeCritBuff","IconInputs.AttackPowerPercentBuff","IconInputs.AttackPowerBuff","IconInputs.MajorArmorDebuff","IconInputs.MinorArmorDebuff","IconInputs.PhysicalDamageDebuff","excludeBuffDebuffInputs","otherInputs","OtherInputs.TankAssignment","encounterPicker","showExecuteProportion","presets","Presets.P1_PRESET"],"mappings":"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"}