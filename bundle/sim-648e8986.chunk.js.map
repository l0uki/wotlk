{"version":3,"file":"sim-648e8986.chunk.js","sources":["../../../ui/warlock/tooltips.ts","../../../ui/warlock/presets.ts","../../../ui/warlock/inputs.ts","../../../ui/warlock/sim.ts"],"sourcesContent":["export const BIS_TOOLTIP = 'This gear preset is inspired from Zephan\\'s Affliction guide: https://www.warcrafttavern.com/wotlk/guides/pve-affliction-warlock/';\r\n","import { Consumes,\n\tFlask,\n\tFood,\n  PetFood,\n\tGlyphs,\n\tEquipmentSpec,\n\tPotions,\n\tRaidBuffs,\n\tIndividualBuffs,\n\tDebuffs,\n\tTristateEffect,\n  Spec,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\nimport { Player } from '../core/player.js';\n\nimport {\n\tWarlock_Rotation as WarlockRotation,\n\tWarlock_Options as WarlockOptions,\n\tWarlock_Rotation_PrimarySpell as PrimarySpell,\n\tWarlock_Rotation_SecondaryDot as SecondaryDot,\n\tWarlock_Rotation_SpecSpell as SpecSpell,\n\tWarlock_Rotation_Curse as Curse,\n  Warlock_Rotation_Type as RotationType,\n\tWarlock_Options_WeaponImbue as WeaponImbue,\n\tWarlock_Options_Armor as Armor,\n\tWarlock_Options_Summon as Summon,\n\tWarlockMajorGlyph as MajorGlyph,\n\tWarlockMinorGlyph as MinorGlyph,\n} from '../core/proto/warlock.js';\n\nimport * as WarlockTooltips from './tooltips.js';\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\n\nexport const AfflictionTalents = {\n\tname: 'Affliction',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '2350002030023510253500331151--550000051',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: MajorGlyph.GlyphOfQuickDecay,\n\t\t\tmajor2: MajorGlyph.GlyphOfLifeTap,\n\t\t\tmajor3: MajorGlyph.GlyphOfHaunt,\n\t\t\tminor1: MinorGlyph.GlyphOfSouls,\n\t\t\tminor2: MinorGlyph.GlyphOfDrainSoul,\n\t\t\tminor3: MinorGlyph.GlyphOfEnslaveDemon,\n\t\t}),\n\t}),\n};\n\nexport const DemonologyTalents = {\n\tname: 'Demonology',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-203203301035012530135201351-550000052',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: MajorGlyph.GlyphOfLifeTap,\n\t\t\tmajor2: MajorGlyph.GlyphOfQuickDecay,\n\t\t\tmajor3: MajorGlyph.GlyphOfFelguard,\n\t\t\tminor1: MinorGlyph.GlyphOfSouls,\n\t\t\tminor2: MinorGlyph.GlyphOfDrainSoul,\n\t\t\tminor3: MinorGlyph.GlyphOfEnslaveDemon,\n\t\t}),\n\t}),\n};\n\nexport const DestructionTalents = {\n\tname: 'Destruction',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-03310030003-05203205210331051335230351',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: MajorGlyph.GlyphOfConflagrate,\n\t\t\tmajor2: MajorGlyph.GlyphOfLifeTap,\n\t\t\tmajor3: MajorGlyph.GlyphOfIncinerate,\n\t\t\tminor1: MinorGlyph.GlyphOfSouls,\n\t\t\tminor2: MinorGlyph.GlyphOfDrainSoul,\n\t\t\tminor3: MinorGlyph.GlyphOfEnslaveDemon,\n\t\t}),\n\t}),\n};\n\nexport const AfflictionRotation = WarlockRotation.create({\n\t\tprimarySpell: PrimarySpell.ShadowBolt,\n\t\tsecondaryDot: SecondaryDot.UnstableAffliction,\n\t\tspecSpell: SpecSpell.Haunt,\n\t\tcurse: Curse.Agony,\n\t\tcorruption: true,\n\t\tdetonateSeed: true,\n});\n\nexport const DemonologyRotation = WarlockRotation.create({\n\tprimarySpell: PrimarySpell.ShadowBolt,\n\tsecondaryDot: SecondaryDot.Immolate,\n\tspecSpell: SpecSpell.NoSpecSpell,\n\tcurse: Curse.Doom,\n\tcorruption: true,\n\tdetonateSeed: true,\n});\n\nexport const DestructionRotation = WarlockRotation.create({\n\tprimarySpell: PrimarySpell.Incinerate,\n\tsecondaryDot: SecondaryDot.Immolate,\n\tspecSpell: SpecSpell.ChaosBolt,\n\tcurse: Curse.Doom,\n\tcorruption: false,\n\tdetonateSeed: true,\n});\n\nexport const AfflictionOptions = WarlockOptions.create({\n\tarmor: Armor.FelArmor,\n\tsummon: Summon.Felhunter,\n\tweaponImbue: WeaponImbue.GrandSpellstone,\n});\n\nexport const DemonologyOptions = WarlockOptions.create({\n\tarmor: Armor.FelArmor,\n\tsummon: Summon.Felguard,\n\tweaponImbue: WeaponImbue.GrandSpellstone,\n});\n\nexport const DestructionOptions = WarlockOptions.create({\n\tarmor: Armor.FelArmor,\n\tsummon: Summon.Imp,\n\tweaponImbue: WeaponImbue.GrandFirestone,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskOfTheFrostWyrm,\n\tfood: Food.FoodFishFeast,\n\tpetFood: PetFood.PetFoodSpicedMammothTreats,\n\tdefaultPotion: Potions.PotionOfWildMagic,\n\tprepopPotion:  Potions.PotionOfWildMagic,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\tpowerWordFortitude: TristateEffect.TristateEffectImproved,\n\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\tarcaneBrilliance: true,\n\tdivineSpirit: true,\n\ttrueshotAura: true,\n\tleaderOfThePack: TristateEffect.TristateEffectImproved,\n\ticyTalons: true,\n\ttotemOfWrath: true,\n\tmoonkinAura: TristateEffect.TristateEffectImproved,\n\twrathOfAirTotem: true,\n\tsanctifiedRetribution: true,\n\tbloodlust: true,\n});\n\nexport const DefaultIndividualBuffs = IndividualBuffs.create({\n  blessingOfKings: true,\n  blessingOfWisdom: TristateEffect.TristateEffectImproved,\n  blessingOfMight: TristateEffect.TristateEffectImproved,\n  vampiricTouch: true,\n});\n\nexport const DestroIndividualBuffs = IndividualBuffs.create({\n  blessingOfKings: true,\n  blessingOfWisdom: TristateEffect.TristateEffectImproved,\n  blessingOfMight: TristateEffect.TristateEffectImproved,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n\tsunderArmor: true,\n\tfaerieFire: TristateEffect.TristateEffectImproved,\n\tbloodFrenzy: true,\n\tebonPlaguebringer: true,\n\theartOfTheCrusader: true,\n\tjudgementOfWisdom: true,\n});\n\nexport const DestroDebuffs = Debuffs.create({\n  sunderArmor: true,\n  faerieFire: TristateEffect.TristateEffectImproved,\n  bloodFrenzy: true,\n  ebonPlaguebringer: true,\n  heartOfTheCrusader: true,\n  judgementOfWisdom: true,\n  shadowMastery: true,\n});\n\nexport const OtherDefaults = {\n\tdistanceFromTarget: 25,\n};\n\nexport const SWP_BIS = {\n\tname: 'Straight Outa SWP',\n\tgear: EquipmentSpec.fromJsonString(`\n{\"items\": [\n        {\n          \"id\": 34340,\n          \"enchant\": 29191,\n          \"gems\": [\n            34220,\n            32215\n          ]\n        },\n        {\n          \"id\": 34204\n        },\n        {\n          \"id\": 31054,\n          \"enchant\": 28886,\n          \"gems\": [\n            32215,\n            35760\n          ]\n        },\n        {\n          \"id\": 34242,\n          \"enchant\": 33150,\n          \"gems\": [\n            32196\n          ]\n        },\n        {\n          \"id\": 34364,\n          \"enchant\": 24003,\n          \"gems\": [\n            32196,\n            35488,\n            32196\n          ]\n        },\n        {\n          \"id\": 34436,\n          \"enchant\": 22534,\n          \"gems\": [\n            35760,\n            0\n          ]\n        },\n        {\n          \"id\": 34344,\n          \"enchant\": 28272,\n          \"gems\": [\n            35760,\n            32196,\n            0\n          ]\n        },\n        {\n          \"id\": 34541,\n          \"gems\": [\n            35760,\n            0\n          ]\n        },\n        {\n          \"id\": 34181,\n          \"enchant\": 24274,\n          \"gems\": [\n            32196,\n            32196,\n            35760\n          ]\n        },\n        {\n          \"id\": 34564,\n          \"enchant\": 35297,\n          \"gems\": [\n            35760\n          ]\n        },\n        {\n          \"id\": 34362,\n          \"enchant\": 22536\n        },\n        {\n          \"id\": 34230,\n          \"enchant\": 22536\n        },\n        {\n          \"id\": 32483\n        },\n        {\n          \"id\": 34429\n        },\n        {\n          \"id\": 34336,\n          \"enchant\": 22561\n        },\n        {\n          \"id\": 34179\n        },\n        {\n          \"id\": 34347,\n          \"gems\": [\n            35760\n          ]\n        }\n      ]}\n    `),\n};\nexport const P1_PreBiS_11 = {\n\tname: 'Pre-Raid Affliction',\n\ttooltip: WarlockTooltips.BIS_TOOLTIP,\n  enableWhen: (player: Player<Spec.SpecWarlock>) => player.getRotation().type == RotationType.Affliction,\n\tgear: EquipmentSpec.fromJsonString(`\n    {\"items\":\n      [\n        {\n          \"id\": 44910,\n          \"enchant\": 44877,\n          \"gems\": [\n            41285,\n            39998\n          ]\n        },\n        {\n          \"id\": 42647,\n          \"gems\": [\n            39998\n          ]\n        },\n        {\n          \"id\": 34210,\n          \"enchant\": 44874,\n          \"gems\": [\n            39998,\n            40051\n          ]\n        },\n        {\n          \"id\": 41610,\n          \"enchant\": 55642\n        },\n        {\n          \"id\": 39497,\n          \"enchant\": 44489,\n          \"gems\": [\n            39998,\n            40051\n          ]\n        },\n        {\n          \"id\": 37361,\n          \"enchant\": 44498,\n          \"gems\": [\n            0\n          ]\n        },\n        {\n          \"id\": 42113,\n          \"enchant\": 54999,\n          \"gems\": [\n            0\n          ]\n        },\n        {\n          \"id\": 40696,\n          \"gems\": [\n            40051,\n            39998\n          ]\n        },\n        {\n          \"id\": 34181,\n          \"enchant\": 41602,\n          \"gems\": [\n            39998,\n            39998,\n            40051\n          ]\n        },\n        {\n          \"id\": 44202,\n          \"enchant\": 55016,\n          \"gems\": [\n            40026\n          ]\n        },\n        {\n          \"id\": 43253,\n          \"gems\": [\n            40026\n          ]\n        },\n        {\n          \"id\": 37694\n        },\n        {\n          \"id\": 40682\n        },\n        {\n          \"id\": 37873\n        },\n        {\n          \"id\": 45085,\n          \"enchant\": 44487\n        },\n        {\n          \"id\": 40698\n        },\n        {\n          \"id\": 34348,\n          \"gems\": [\n            39998\n          ]\n        }\n      ]\n    }\n  `),\n}\nexport const P1_Preset_Demo_Destro = {\n  name: 'P1 Preset Demo / Destro',\n  tooltip: WarlockTooltips.BIS_TOOLTIP,\n  enableWhen: (player: Player<Spec.SpecWarlock>) => player.getRotation().type == RotationType.Demonology || player.getRotation().type == RotationType.Destruction,\n  gear: EquipmentSpec.fromJsonString(`\n    {\"items\":\n      [\n        {\n          \"id\": 40421,\n          \"enchant\": 44877,\n          \"gems\": [\n            41285,\n            40014\n          ]\n        },\n        {\n          \"id\": 44661,\n          \"gems\": [\n            40099\n          ]\n        },\n        {\n          \"id\": 40424,\n          \"enchant\": 44874,\n          \"gems\": [\n            40049\n          ]\n        },\n        {\n          \"id\": 44005,\n          \"enchant\": 55642,\n          \"gems\": [\n            40099\n          ]\n        },\n        {\n          \"id\": 40423,\n          \"enchant\": 44489,\n          \"gems\": [\n            40049,\n            40014\n          ]\n        },\n        {\n          \"id\": 44008,\n          \"enchant\": 44498,\n          \"gems\": [\n            39998,\n            0\n          ]\n        },\n        {\n          \"id\": 40420,\n          \"enchant\": 54999,\n          \"gems\": [\n            39998,\n            0\n          ]\n        },\n        {\n          \"id\": 40561,\n          \"gems\": [\n            40014\n          ]\n        },\n        {\n          \"id\": 40560,\n          \"enchant\": 41602\n        },\n        {\n          \"id\": 40558,\n          \"enchant\": 55016\n        },\n        {\n          \"id\": 40399\n        },\n        {\n          \"id\": 40719\n        },\n        {\n          \"id\": 40432\n        },\n        {\n          \"id\": 40255\n        },\n        {\n          \"id\": 40396,\n          \"enchant\": 44487\n        },\n        {\n          \"id\": 39766\n        },\n        {\n          \"id\": 39712\n        }\n      ]\n    }\n  `),\n}\n\n\n// will have only rare gems, but a Lightweave Embroidery on cloak.\nexport const P1_Preset_Affliction = {\n\tname: 'P1 Affliction Preset',\n\ttooltip: WarlockTooltips.BIS_TOOLTIP,\n  enableWhen: (player: Player<Spec.SpecWarlock>) => player.getRotation().type == RotationType.Affliction,\n\tgear: EquipmentSpec.fromJsonString(`\n    {\"items\":\n      [\n        {\n          \"id\": 40421,\n          \"enchant\": 44877,\n          \"gems\": [\n            41285,\n            40051\n          ]\n        },\n        {\n          \"id\": 44661,\n          \"gems\": [\n            40026\n          ]\n        },\n        {\n          \"id\": 40424,\n          \"enchant\": 44874,\n          \"gems\": [\n            39998\n          ]\n        },\n        {\n          \"id\": 44005,\n          \"enchant\": 55642,\n          \"gems\": [\n            40026\n          ]\n        },\n        {\n          \"id\": 40423,\n          \"enchant\": 44489,\n          \"gems\": [\n            39998,\n            40051\n          ]\n        },\n        {\n          \"id\": 44008,\n          \"enchant\": 44498,\n          \"gems\": [\n            39998,\n            0\n          ]\n        },\n        {\n          \"id\": 40420,\n          \"enchant\": 54999,\n          \"gems\": [\n            39998,\n            0\n          ]\n        },\n        {\n          \"id\": 40561,\n          \"gems\": [\n            39998\n          ]\n        },\n        {\n          \"id\": 40560,\n          \"enchant\": 41602\n        },\n        {\n          \"id\": 40558,\n          \"enchant\": 55016\n        },\n        {\n          \"id\": 40399\n        },\n        {\n          \"id\": 40719\n        },\n        {\n          \"id\": 40432\n        },\n        {\n          \"id\": 40255\n        },\n        {\n          \"id\": 40396,\n          \"enchant\": 44487\n        },\n        {\n          \"id\": 39766\n        },\n        {\n          \"id\": 39712\n        }\n      ]\n    }\n  `),\n}\n\n\nexport const P1_PreBiS_14 = {\n  name: 'Pre-Raid Preset',\n  tooltip: WarlockTooltips.BIS_TOOLTIP,\n  enableWhen: (player: Player<Spec.SpecWarlock>) => player.getRotation().type == RotationType.Demonology || player.getRotation().type == RotationType.Destruction,\n  gear: EquipmentSpec.fromJsonString(`\n    {\"items\":\n      [\n        {\n          \"id\": 44910,\n          \"enchant\": 44877,\n          \"gems\": [\n            41285,\n            39998\n          ]\n        },\n        {\n          \"id\": 42647,\n          \"gems\": [\n            40049\n          ]\n        },\n        {\n          \"id\": 34210,\n          \"enchant\": 44874,\n          \"gems\": [\n            39998,\n            40014\n          ]\n        },\n        {\n          \"id\": 41610,\n          \"enchant\": 55642\n        },\n        {\n          \"id\": 39497,\n          \"enchant\": 44489,\n          \"gems\": [\n            39998,\n            40014\n          ]\n        },\n        {\n          \"id\": 37361,\n          \"enchant\": 44498,\n          \"gems\": [\n            0\n          ]\n        },\n        {\n          \"id\": 42113,\n          \"enchant\": 54999,\n          \"gems\": [\n            0\n          ]\n        },\n        {\n          \"id\": 40696,\n          \"gems\": [\n            40014,\n            39998\n          ]\n        },\n        {\n          \"id\": 34181,\n          \"enchant\": 41602,\n          \"gems\": [\n            39998,\n            39998,\n            40014\n          ]\n        },\n        {\n          \"id\": 44202,\n          \"enchant\": 55016,\n          \"gems\": [\n            40026\n          ]\n        },\n        {\n          \"id\": 43253,\n          \"gems\": [\n            40026\n          ]\n        },\n        {\n          \"id\": 37694\n        },\n        {\n          \"id\": 40682\n        },\n        {\n          \"id\": 37873\n        },\n        {\n          \"id\": 45085,\n          \"enchant\": 44487\n        },\n        {\n          \"id\": 40698\n        },\n        {\n          \"id\": 34348,\n          \"gems\": [\n            39998\n          ]\n        }\n      ]\n    }\n  `),\n}\n\nexport const Naked = {\n  name: 'The Naked Bolt',\n  gear: EquipmentSpec.fromJsonString(`\n    {\"items\":\n      [\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {}\n      ]\n    }\n  `),\n}\n  \n","import {\n\tWarlock_Options as WarlockOptions,\n\tWarlock_Rotation_Type as RotationType,\n\tWarlock_Rotation_Preset as RotationPreset,\n\tWarlock_Rotation_PrimarySpell as PrimarySpell,\n\tWarlock_Rotation_SecondaryDot as SecondaryDot,\n\tWarlock_Rotation_SpecSpell as SpecSpell,\n\tWarlock_Rotation_Curse as Curse,\n\tWarlock_Options_WeaponImbue as WeaponImbue,\n\tWarlock_Options_Armor as Armor,\n\tWarlock_Options_Summon as Summon,\n} from '../core/proto/warlock.js';\n\nimport { RaidTarget, Spec, Glyphs, Debuffs, IndividualBuffs, RaidBuffs } from '../core/proto/common.js';\nimport { NO_TARGET } from '../core/proto_utils/utils.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\nimport { Sim } from '../core/sim.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\nimport { Target } from '../core/target.js';\nimport { SimUI, SimWarning } from '../core/sim_ui.js';\n\nimport { IconPickerConfig } from '../core/components/icon_picker.js';\nimport { IconEnumPicker, IconEnumPickerConfig, IconEnumValueConfig } from '../core/components/icon_enum_picker.js';\nimport * as Presets from './presets.js';\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const ArmorInput = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecWarlock, Armor>({\n\tfieldName: 'armor',\n\tvalues: [\n\t\t{ color: 'grey', value: Armor.NoArmor },\n\t\t{ actionId: ActionId.fromSpellId(47893), value: Armor.FelArmor },\n\t\t{ actionId: ActionId.fromSpellId(47889), value: Armor.DemonArmor },\n\t],\n});\n\nexport const WeaponImbueInput = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecWarlock, WeaponImbue>({\n\tfieldName: 'weaponImbue',\n\tvalues: [\n\t\t{ color: 'grey', value: WeaponImbue.NoWeaponImbue },\n\t\t{ actionId: ActionId.fromItemId(41174), value: WeaponImbue.GrandFirestone },\n\t\t{ actionId: ActionId.fromItemId(41196), value: WeaponImbue.GrandSpellstone },\n\t],\n});\n\nexport const PetInput = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecWarlock, Summon>({\n\tfieldName: 'summon',\n\tvalues: [\n\t\t{ color: 'grey', value: Summon.NoSummon },\n\t\t{ actionId: ActionId.fromSpellId(688), value: Summon.Imp },\n\t\t{ actionId: ActionId.fromSpellId(712), value: Summon.Succubus },\n\t\t{ actionId: ActionId.fromSpellId(691), value: Summon.Felhunter },\n\t\t{ \n\t\t\tactionId: ActionId.fromSpellId(30146), value: Summon.Felguard,\n\t\t\tshowWhen: (player: Player<Spec.SpecWarlock>) => player.getTalents().summonFelguard,\n\t\t},\n\t],\n\tchangeEmitter: (player: Player<Spec.SpecWarlock>) => player.changeEmitter,\n});\n\nexport const PrimarySpellInput = InputHelpers.makeRotationEnumIconInput<Spec.SpecWarlock, PrimarySpell>({\n\tfieldName: 'primarySpell',\n\tvalues: [\n\t\t{ actionId: ActionId.fromSpellId(47809), value: PrimarySpell.ShadowBolt },\n\t\t{ actionId: ActionId.fromSpellId(47838), value: PrimarySpell.Incinerate },\n\t\t{ actionId: ActionId.fromSpellId(47836), value: PrimarySpell.Seed },\n\t],\n\tsetValue: (eventID: EventID, player: Player<Spec.SpecWarlock>, newValue: number) => {\n\t\tconst newRotation = player.getRotation();\n\t\tif (newValue == PrimarySpell.Seed && newRotation.corruption == true) {\n\t\t\tnewRotation.corruption = false\n\t\t}\n\t\tnewRotation.primarySpell = newValue\n\t\tnewRotation.preset = RotationPreset.Manual;\n\t\tplayer.setRotation(eventID, newRotation);\n\t},\n});\n\nexport const SecondaryDotInput = InputHelpers.makeRotationEnumIconInput<Spec.SpecWarlock, SecondaryDot>({\n\tfieldName: 'secondaryDot',\n\tvalues: [\n\t\t{ color: 'grey', value: SecondaryDot.NoSecondaryDot },\n\t\t{ actionId: ActionId.fromSpellId(47811), value: SecondaryDot.Immolate },\n\t\t{\n\t\t\tactionId: ActionId.fromSpellId(47843), value: SecondaryDot.UnstableAffliction,\n\t\t\tshowWhen: (player: Player<Spec.SpecWarlock>) => player.getTalents().unstableAffliction,\n\t\t},\n\t],\n\tchangeEmitter: (player: Player<Spec.SpecWarlock>) => player.changeEmitter,\n\tsetValue: (eventID: EventID, player: Player<Spec.SpecWarlock>, newValue: number) => {\n\t\tconst newRotation = player.getRotation();\n\t\tnewRotation.secondaryDot = newValue;\n\t\tnewRotation.preset = RotationPreset.Manual;\n\t\tplayer.setRotation(eventID, newRotation);\n\t},\n});\n\nexport const SpecSpellInput = InputHelpers.makeRotationEnumIconInput<Spec.SpecWarlock, SpecSpell>({\n\tfieldName: 'specSpell',\n\tvalues: [\n\t\t{ color: 'grey', value: SpecSpell.NoSpecSpell },\n\t\t{\n\t\t\tactionId: ActionId.fromSpellId(59164), value: SpecSpell.Haunt,\n\t\t\tshowWhen: (player: Player<Spec.SpecWarlock>) => player.getTalents().haunt,\n\t\t},\n\t\t{\n\t\t\tactionId: ActionId.fromSpellId(59172), value: SpecSpell.ChaosBolt,\n\t\t\tshowWhen: (player: Player<Spec.SpecWarlock>) => player.getTalents().chaosBolt,\n\t\t},\n\t],\n\tchangeEmitter: (player: Player<Spec.SpecWarlock>) => player.changeEmitter,\n\tsetValue: (eventID: EventID, player: Player<Spec.SpecWarlock>, newValue: number) => {\n\t\tconst newRotation = player.getRotation();\n\t\tnewRotation.specSpell = newValue;\n\t\tnewRotation.preset = RotationPreset.Manual;\n\t\tplayer.setRotation(eventID, newRotation);\n\t},\n});\n\n\nexport const CorruptionSpell = {\n\ttype: 'icon' as const,\n\tid: ActionId.fromSpellId(47813),\n\tstates: 2,\n\textraCssClasses: [\n\t\t'Corruption-picker',\n\t],\n\tchangedEvent: (player: Player<Spec.SpecWarlock>) => player.changeEmitter,\n\tgetValue: (player: Player<Spec.SpecWarlock>) => player.getRotation().corruption,\n\tsetValue: (eventID: EventID, player: Player<Spec.SpecWarlock>, newValue: boolean) => {\n\t\tconst newRotation = player.getRotation();\n\t\tif (newRotation.primarySpell == PrimarySpell.Seed && newValue == true) {\n\t\t\tnewRotation.primarySpell = PrimarySpell.ShadowBolt\n\t\t}\n\t\tnewRotation.corruption = newValue;\n\t\tnewRotation.preset = RotationPreset.Manual;\n\t\tplayer.setRotation(eventID, newRotation);\n\t},\n};\n\n\nexport const WarlockRotationConfig = {\n\tinputs: [\n\t\t{\n\t\t\ttype: 'enum' as const,\n\n\t\t\tlabel: 'SIM PRESETS',\n\t\t\tlabelTooltip: 'Quick switch between sim spec presets. Will UPDATE TALENTS and SPELLS to defaults.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Affliction', value: RotationType.Affliction },\n\t\t\t\t{ name: 'Demonology', value: RotationType.Demonology },\n\t\t\t\t{ name: 'Destruction', value: RotationType.Destruction },\n\t\t\t],\n\t\t\tchangedEvent: (player: Player<Spec.SpecWarlock>) => player.rotationChangeEmitter,\n\t\t\tgetValue: (player: Player<Spec.SpecWarlock>) => player.getRotation().type,\n\t\t\tsetValue: (eventID: EventID, player: Player<Spec.SpecWarlock>, newValue: number) => {\n\t\t\t\tvar newRotation = player.getRotation();\n\t\t\t\tvar newOptions: WarlockOptions;\n\t\t\t\tvar newGlyphs: Glyphs;\n\t\t\t\tvar newTalents: string;\n\t\t\t\t// var newIndividualBuffs = player.getBuffs();\n\t\t\t\t// const raid = player.getRaid();\n\t\t\t\t// var newDebuffs = raid?.getDebuffs();\n\t\t\t\t// var newRaidBuffs = raid?.getBuffs();\n\t\t\t\tif (newValue == RotationType.Affliction) {\n\t\t\t\t\tnewTalents = Presets.AfflictionTalents.data.talentsString\n\t\t\t\t\tnewGlyphs = Presets.AfflictionTalents.data.glyphs || Glyphs.create();\n\t\t\t\t\tnewRotation = Presets.AfflictionRotation\n\t\t\t\t\tnewOptions = Presets.AfflictionOptions\n\t\t\t\t\t// if (newDebuffs != undefined) {\n\t\t\t\t\t// \tnewDebuffs.shadowMastery = false\n\t\t\t\t\t// }\n\t\t\t\t} else if (newValue == RotationType.Demonology) {\n\t\t\t\t\tnewTalents = Presets.DemonologyTalents.data.talentsString\n\t\t\t\t\tnewGlyphs = Presets.DemonologyTalents.data.glyphs || Glyphs.create();\n\t\t\t\t\tnewRotation = Presets.DemonologyRotation\n\t\t\t\t\tnewOptions = Presets.DemonologyOptions\n\t\t\t\t\t// if (newDebuffs != undefined) {\n\t\t\t\t\t// \tnewDebuffs.shadowMastery = false\n\t\t\t\t\t// }\n\t\t\t\t\t// if (newRaidBuffs != undefined) {\n\t\t\t\t\t// \tnewRaidBuffs.demonicPact = 0\n\t\t\t\t\t// }\n\t\t\t\t} else if (newValue == RotationType.Destruction) {\n\t\t\t\t\tnewTalents = Presets.DestructionTalents.data.talentsString\n\t\t\t\t\tnewGlyphs = Presets.DestructionTalents.data.glyphs || Glyphs.create();\n\t\t\t\t\tnewRotation = Presets.DestructionRotation\n\t\t\t\t\tnewOptions = Presets.DestructionOptions\n\t\t\t\t\t// newIndividualBuffs.improvedSoulLeech = false\n\t\t\t\t\t// if (newDebuffs != undefined) {\n\t\t\t\t\t// \tnewDebuffs.shadowMastery = true\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t\tnewRotation.type = newValue;\n\t\t\t\tnewRotation.preset = RotationPreset.Automatic;\n\t\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\t\tplayer.setTalentsString(eventID, newTalents);\n\t\t\t\t\tplayer.setSpecOptions(eventID, newOptions);\n\t\t\t\t\tplayer.setGlyphs(eventID, newGlyphs);\n\t\t\t\t\tplayer.setRotation(eventID, newRotation);\n\t\t\t\t\t// player.setBuffs(eventID, newIndividualBuffs);\n\t\t\t\t\t// raid?.setDebuffs(eventID, newDebuffs || Debuffs.create());\n\t\t\t\t\t// raid?.setBuffs(eventID, newRaidBuffs || RaidBuffs.create());\n\t\t\t\t});\n\t\t\t},\n\t\t},\n\n\t\t{\n\t\t\ttype: 'enum' as const,\n\t\t\tlabel: 'Spell & Talent',\n\t\t\tlabelTooltip: 'Putting it on Automatic will UPDATE talents and spells to defaults.',\n\t\t\tvalues: [\n\t\t\t\t{name: \"Manual\", value: RotationPreset.Manual},\n\t\t\t\t{name: \"Automatic\", value: RotationPreset.Automatic},\n\t\t\t],\n\t\t\tchangedEvent: (player: Player<Spec.SpecWarlock>) => player.rotationChangeEmitter,\n\t\t\tgetValue: (player: Player<Spec.SpecWarlock>) => player.getRotation().preset,\n\t\t\tsetValue: (eventID: EventID, player: Player<Spec.SpecWarlock>, newValue: number) => {\n\t\t\t\tvar newRotation = player.getRotation();\n\t\t\t\tif (newValue == RotationPreset.Automatic) {\n\t\t\t\t\tvar newOptions: WarlockOptions;\n\t\t\t\t\tvar newGlyphs: Glyphs;\n\t\t\t\t\tvar newTalents: string;\n\t\t\t\t\t// var newIndividualBuffs = player.getBuffs();\n\t\t\t\t\t// const raid = player.getRaid();\n\t\t\t\t\t// var newDebuffs = raid?.getDebuffs();\n\t\t\t\t\tif (newRotation.type == RotationType.Affliction) {\n\t\t\t\t\t\tnewTalents = Presets.AfflictionTalents.data.talentsString\n\t\t\t\t\t\tnewGlyphs = Presets.AfflictionTalents.data.glyphs || Glyphs.create()\n\t\t\t\t\t\tnewRotation = Presets.AfflictionRotation\n\t\t\t\t\t\tnewOptions = Presets.AfflictionOptions\n\t\t\t\t\t\t// if (newDebuffs != undefined) {\n\t\t\t\t\t\t// \tnewDebuffs.shadowMastery = false\n\t\t\t\t\t\t// }\n\t\t\t\t\t} else if (newRotation.type == RotationType.Demonology) {\n\t\t\t\t\t\tnewTalents = Presets.DemonologyTalents.data.talentsString\n\t\t\t\t\t\tnewGlyphs = Presets.DemonologyTalents.data.glyphs || Glyphs.create()\n\t\t\t\t\t\tnewRotation = Presets.DemonologyRotation\n\t\t\t\t\t\tnewOptions = Presets.DemonologyOptions\n\t\t\t\t\t\t// if (newDebuffs != undefined) {\n\t\t\t\t\t\t// \tnewDebuffs.shadowMastery = false\n\t\t\t\t\t\t// }\n\t\t\t\t\t} else if (newRotation.type == RotationType.Destruction) {\n\t\t\t\t\t\tnewTalents = Presets.DestructionTalents.data.talentsString\n\t\t\t\t\t\tnewGlyphs = Presets.DestructionTalents.data.glyphs || Glyphs.create()\n\t\t\t\t\t\tnewRotation = Presets.DestructionRotation\n\t\t\t\t\t\tnewOptions = Presets.DestructionOptions\n\t\t\t\t\t\t// newIndividualBuffs.improvedSoulLeech = false\n\t\t\t\t\t\t// if (newDebuffs != undefined) {\n\t\t\t\t\t\t// \tnewDebuffs.shadowMastery = true\n\t\t\t\t\t\t// }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnewRotation.preset = newValue;\n\t\t\t\tconst raid = player.getRaid();\n\t\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\t\tif (newValue == RotationPreset.Automatic) {\n\t\t\t\t\t\tplayer.setTalentsString(eventID, newTalents);\n\t\t\t\t\t\tplayer.setSpecOptions(eventID, newOptions);\n\t\t\t\t\t\tplayer.setGlyphs(eventID, newGlyphs);\n\t\t\t\t\t\t// player.setBuffs(eventID, newIndividualBuffs);\n\t\t\t\t\t\t// raid?.setDebuffs(eventID, newDebuffs || Debuffs.create());\n\t\t\t\t\t}\n\t\t\t\t\tplayer.setRotation(eventID, newRotation);\n\t\t\t\t});\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\ttype: 'enum' as const,\n\t\t\tlabel: 'Curse',\n\t\t\tlabelTooltip: 'Manual curse selection.',\n\t\t\tvalues: [\n\t\t\t\t{ name: \"None\", value: Curse.NoCurse },\n\t\t\t\t{ name: \"Elements\", value: Curse.Elements },\n\t\t\t\t{ name: \"Weakness\", value: Curse.Weakness },\n\t\t\t\t{ name: \"Doom\", value: Curse.Doom },\n\t\t\t\t{ name: \"Agony\", value: Curse.Agony },\n\t\t\t\t{ name: \"Tongues\", value: Curse.Tongues }\n\t\t\t],\n\t\t\tchangedEvent: (player: Player<Spec.SpecWarlock>) => player.rotationChangeEmitter,\n\t\t\tgetValue: (player: Player<Spec.SpecWarlock>) => player.getRotation().curse,\n\t\t\tsetValue: (eventID: EventID, player: Player<Spec.SpecWarlock>, newValue: number) => {\n\t\t\t\tconst newRotation = player.getRotation();\n\t\t\t\tnewRotation.curse = newValue;\n\t\t\t\tnewRotation.preset = RotationPreset.Manual;\n\t\t\t\tplayer.setRotation(eventID, newRotation);\n\t\t\t},\n\t\t},\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarlock>({\n\t\t\tfieldName: 'detonateSeed',\n\t\t\tlabel: 'Detonate Seed on Cast',\n\t\t\tlabelTooltip: 'Simulates raid doing damage to targets such that seed detonates immediately on cast.',\n\t\t\tshowWhen: (player: Player<Spec.SpecWarlock>) => player.getRotation().primarySpell == PrimarySpell.Seed,\n\t\t}),\n\t],\n};\n","import { RaidBuffs,\n\tPartyBuffs,\n\tIndividualBuffs,\n\tDebuffs,\n\tSpec,\n\tStat,\n\tTristateEffect,\n\tRace,\n} from '../core/proto/common.js';\n\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { Player } from '../core/player.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\nimport { TypedEvent } from '../core/typed_event.js';\n\nimport {\n\tWarlock,\n\tWarlock_Rotation as WarlockRotation,\n\tWarlockTalents as WarlockTalents,\n\tWarlock_Options as WarlockOptions,\n\tWarlock_Options_Armor as Armor,\n\tWarlock_Options_Summon as Summon,\n\tWarlock_Options_WeaponImbue as WeaponImbue,\n} from '../core/proto/warlock.js';\n\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Tooltips from '../core/constants/tooltips.js';\n\nimport * as WarlockInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nexport class WarlockSimUI extends IndividualSimUI<Spec.SpecWarlock> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecWarlock>) {\n\t\tsuper(parentElem, player, {\n\t\t\tcssClass: 'warlock-sim-ui',\n\t\t\t// List any known bugs / issues here and they'll be shown on the site.\n\t\t\tknownIssues: [\n\t\t\t\t\"Several secondary spells need to be implemented.\",\n\t\t\t\t\"Rotations will be optimized.\",\n\t\t\t],\n\n\t\t\t// All stats for which EP should be calculated.\n\t\t\tepStats: [\n\t\t\t\tStat.StatIntellect,\n\t\t\t\tStat.StatSpirit,\n\t\t\t\tStat.StatSpellPower,\n\t\t\t\tStat.StatShadowSpellPower,\n\t\t\t\tStat.StatFireSpellPower,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatSpellHaste,\n\t\t\t],\n\t\t\t// Reference stat against which to calculate EP. DPS classes use either spell power or attack power.\n\t\t\tepReferenceStat: Stat.StatSpellPower,\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\t\t\tdisplayStats: [\n\t\t\t\tStat.StatHealth,\n\t\t\t\tStat.StatIntellect,\n\t\t\t\tStat.StatSpirit,\n\t\t\t\tStat.StatSpellPower,\n\t\t\t\tStat.StatShadowSpellPower,\n\t\t\t\tStat.StatFireSpellPower,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatSpellHaste,\n\t\t\t\tStat.StatMP5,\n\t\t\t],\n\n\t\t\tdefaults: {\n\t\t\t\t// Default equipped gear.\n\t\t\t\tgear: Presets.SWP_BIS.gear,\n\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\n\t\t\t\tepWeights: Stats.fromMap({\n\t\t\t\t\t[Stat.StatIntellect]: 0.2,\n\t\t\t\t\t[Stat.StatSpirit]: 0.42,\n\t\t\t\t\t[Stat.StatSpellPower]: 1,\n\t\t\t\t\t[Stat.StatShadowSpellPower]: 1,\n\t\t\t\t\t[Stat.StatFireSpellPower]: 0,\n\t\t\t\t\t[Stat.StatSpellHit]: 0.93,\n\t\t\t\t\t[Stat.StatSpellCrit]: 0.52,\n\t\t\t\t\t[Stat.StatSpellHaste]: 0.77,\n\t\t\t\t}),\n\t\t\t\t// Default consumes settings.\n\t\t\t\tconsumes: Presets.DefaultConsumes,\n\n\t\t\t\t// Default rotation settings.\n\t\t\t\trotation: Presets.AfflictionRotation,\n\t\t\t\t// Default talents.\n\t\t\t\ttalents: Presets.AfflictionTalents.data,\n\t\t\t\t// Default spec-specific settings.\n\t\t\t\tspecOptions: Presets.AfflictionOptions,\n\n\t\t\t\t// Default buffs and debuffs settings.\n\t\t\t\traidBuffs: Presets.DefaultRaidBuffs,\n\n\t\t\t\tpartyBuffs: PartyBuffs.create({}),\n\n\t\t\t\tindividualBuffs: Presets.DefaultIndividualBuffs,\n\n\t\t\t\tdebuffs: Presets.DefaultDebuffs,\n\n\t\t\t\tother: Presets.OtherDefaults,\n\t\t\t},\n\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\n\t\t\tplayerIconInputs: [\n\t\t\t\tWarlockInputs.PetInput,\n\t\t\t\tWarlockInputs.ArmorInput,\n\t\t\t\tWarlockInputs.WeaponImbueInput,\n\t\t\t],\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\n\t\t\trotationIconInputs: [\n\t\t\t\tWarlockInputs.PrimarySpellInput,\n\t\t\t\tWarlockInputs.CorruptionSpell,\n\t\t\t\tWarlockInputs.SecondaryDotInput,\n\t\t\t\tWarlockInputs.SpecSpellInput,\n\t\t\t],\n\t\t\trotationInputs: WarlockInputs.WarlockRotationConfig,\n\t\t\t\n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\t\t\tincludeBuffDebuffInputs: [\n\t\t\t\tIconInputs.ReplenishmentBuff,\n\t\t\t\tIconInputs.MajorArmorDebuff,\n\t\t\t\tIconInputs.MinorArmorDebuff,\n\t\t\t\tIconInputs.PhysicalDamageDebuff,\n\t\t\t\tIconInputs.MeleeHasteBuff,\n\t\t\t\tIconInputs.MeleeCritBuff,\n\t\t\t\tIconInputs.MP5Buff,\n\t\t\t\tIconInputs.AttackPowerPercentBuff,\n\t\t\t\tIconInputs.AttackPowerBuff,\n\t\t\t\tIconInputs.StrengthAndAgilityBuff,\n\t\t\t\tIconInputs.StaminaBuff,\n\t\t\t],\n\t\t\texcludeBuffDebuffInputs: [\n\t\t\t],\n\t\t\tpetConsumeInputs: [\n\t\t\t\tIconInputs.SpicedMammothTreats,\n\t\t\t],\n\t\t// Inputs to include in the 'Other' section on the settings tab.\n\t\t\totherInputs: {\n\t\t\t\tinputs: [\n\t\t\t\t\tOtherInputs.DistanceFromTarget,\n\t\t\t\t\tOtherInputs.TankAssignment,\n\t\t\t\t],\n\t\t\t},\n\t\t\tencounterPicker: {\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\t\t\tshowExecuteProportion: false,\n\t\t\t},\n\n\t\t\tpresets: {\n\t\t\t\t// Preset talents that the user can quickly select.\n\t\t\t\ttalents: [\n\t\t\t\t\tPresets.AfflictionTalents,\n\t\t\t\t\tPresets.DemonologyTalents,\n\t\t\t\t\tPresets.DestructionTalents,\n\t\t\t\t],\n\t\t\t\t//Preset gear configurations that the user can quickly select.\n\t\t\t\tgear: [\n\t\t\t\t\t// Presets.Naked,\n\t\t\t\t\tPresets.SWP_BIS,\n\t\t\t\t\tPresets.P1_PreBiS_11,\n\t\t\t\t\tPresets.P1_PreBiS_14,\n\t\t\t\t\tPresets.P1_Preset_Affliction,\n\t\t\t\t\tPresets.P1_Preset_Demo_Destro,\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t}\n}\n"],"names":["BIS_TOOLTIP","AfflictionTalents","name","data","SavedTalents","create","talentsString","glyphs","Glyphs","major1","MajorGlyph","GlyphOfQuickDecay","major2","GlyphOfLifeTap","major3","GlyphOfHaunt","minor1","MinorGlyph","GlyphOfSouls","minor2","GlyphOfDrainSoul","minor3","GlyphOfEnslaveDemon","DemonologyTalents","GlyphOfFelguard","DestructionTalents","GlyphOfConflagrate","GlyphOfIncinerate","AfflictionRotation","WarlockRotation","primarySpell","PrimarySpell","ShadowBolt","secondaryDot","SecondaryDot","UnstableAffliction","specSpell","SpecSpell","Haunt","curse","Curse","Agony","corruption","detonateSeed","DemonologyRotation","Immolate","NoSpecSpell","Doom","DestructionRotation","Incinerate","ChaosBolt","AfflictionOptions","WarlockOptions","armor","Armor","FelArmor","summon","Summon","Felhunter","weaponImbue","WeaponImbue","GrandSpellstone","DemonologyOptions","Felguard","DestructionOptions","Imp","GrandFirestone","DefaultConsumes","Consumes","flask","Flask","FlaskOfTheFrostWyrm","food","Food","FoodFishFeast","petFood","PetFood","PetFoodSpicedMammothTreats","defaultPotion","Potions","PotionOfWildMagic","prepopPotion","DefaultRaidBuffs","RaidBuffs","giftOfTheWild","TristateEffect","TristateEffectImproved","powerWordFortitude","strengthOfEarthTotem","arcaneBrilliance","divineSpirit","trueshotAura","leaderOfThePack","icyTalons","totemOfWrath","moonkinAura","wrathOfAirTotem","sanctifiedRetribution","bloodlust","DefaultIndividualBuffs","IndividualBuffs","blessingOfKings","blessingOfWisdom","blessingOfMight","vampiricTouch","DefaultDebuffs","Debuffs","sunderArmor","faerieFire","bloodFrenzy","ebonPlaguebringer","heartOfTheCrusader","judgementOfWisdom","shadowMastery","OtherDefaults","distanceFromTarget","SWP_BIS","gear","EquipmentSpec","fromJsonString","P1_PreBiS_11","tooltip","WarlockTooltips.BIS_TOOLTIP","enableWhen","player","getRotation","type","RotationType","Affliction","P1_Preset_Demo_Destro","Demonology","Destruction","P1_Preset_Affliction","P1_PreBiS_14","ArmorInput","InputHelpers.makeSpecOptionsEnumIconInput","fieldName","values","color","value","NoArmor","actionId","ActionId","fromSpellId","DemonArmor","WeaponImbueInput","NoWeaponImbue","fromItemId","PetInput","NoSummon","Succubus","showWhen","getTalents","summonFelguard","changeEmitter","PrimarySpellInput","InputHelpers.makeRotationEnumIconInput","Seed","setValue","eventID","newValue","newRotation","preset","RotationPreset","Manual","setRotation","SecondaryDotInput","NoSecondaryDot","unstableAffliction","SpecSpellInput","haunt","chaosBolt","CorruptionSpell","id","states","extraCssClasses","changedEvent","getValue","WarlockRotationConfig","inputs","label","labelTooltip","rotationChangeEmitter","newOptions","newGlyphs","newTalents","Presets.AfflictionTalents","Presets.AfflictionRotation","Presets.AfflictionOptions","Presets.DemonologyTalents","Presets.DemonologyRotation","Presets.DemonologyOptions","Presets.DestructionTalents","Presets.DestructionRotation","Presets.DestructionOptions","Automatic","TypedEvent","freezeAllAndDo","setTalentsString","setSpecOptions","setGlyphs","getRaid","NoCurse","Elements","Weakness","Tongues","InputHelpers.makeRotationBooleanInput","WarlockSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","knownIssues","epStats","Stat","StatIntellect","StatSpirit","StatSpellPower","StatShadowSpellPower","StatFireSpellPower","StatSpellHit","StatSpellCrit","StatSpellHaste","epReferenceStat","displayStats","StatHealth","StatMP5","defaults","Presets.SWP_BIS","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","rotation","talents","specOptions","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","PartyBuffs","individualBuffs","Presets.DefaultIndividualBuffs","debuffs","Presets.DefaultDebuffs","other","Presets.OtherDefaults","playerIconInputs","WarlockInputs.PetInput","WarlockInputs.ArmorInput","WarlockInputs.WeaponImbueInput","rotationIconInputs","WarlockInputs.PrimarySpellInput","WarlockInputs.CorruptionSpell","WarlockInputs.SecondaryDotInput","WarlockInputs.SpecSpellInput","rotationInputs","WarlockInputs.WarlockRotationConfig","includeBuffDebuffInputs","IconInputs.ReplenishmentBuff","IconInputs.MajorArmorDebuff","IconInputs.MinorArmorDebuff","IconInputs.PhysicalDamageDebuff","IconInputs.MeleeHasteBuff","IconInputs.MeleeCritBuff","IconInputs.MP5Buff","IconInputs.AttackPowerPercentBuff","IconInputs.AttackPowerBuff","IconInputs.StrengthAndAgilityBuff","IconInputs.StaminaBuff","excludeBuffDebuffInputs","petConsumeInputs","IconInputs.SpicedMammothTreats","otherInputs","OtherInputs.DistanceFromTarget","OtherInputs.TankAssignment","encounterPicker","showExecuteProportion","presets","Presets.P1_PreBiS_11","Presets.P1_PreBiS_14","Presets.P1_Preset_Affliction","Presets.P1_Preset_Demo_Destro"],"mappings":"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"}