import{a6 as e,bV as a,c4 as n,c5 as t,c6 as i,bp as l,bq as s,bX as o,c7 as r,b_ as m,b$ as d,c0 as c,c1 as h,c2 as f,c8 as u,bl as S,b6 as p,b1 as g,b4 as b,R as v,a3 as y,D as W,a_ as w,d as I,a as T,bj as k,bk as M}from"./raid_sim_action-ba7bc10a.chunk.js";import{m as O,q as P,u as F,a as N,b as E,c as R,B as A,I as D,R as H,v as j,w as x,x as B,y as C,T as _,p as L}from"./individual_sim_ui-f17c4a89.chunk.js";import{T as G}from"./totem_inputs-e0895b0d.chunk.js";const q=O({fieldName:"bloodlust",id:e.fromSpellId(2825)}),J=P({fieldName:"shield",values:[{color:"grey",value:a.NoShield},{actionId:e.fromSpellId(57960),value:a.WaterShield},{actionId:e.fromSpellId(49281),value:a.LightningShield}]}),z=P({fieldName:"imbueMh",values:[{color:"grey",value:n.NoImbue},{actionId:e.fromSpellId(58804),value:n.WindfuryWeapon},{actionId:e.fromSpellId(58790),value:n.FlametongueWeapon},{actionId:e.fromSpellId(58789),value:n.FlametongueWeaponDownrank},{actionId:e.fromSpellId(58796),value:n.FrostbrandWeapon}]}),K=P({fieldName:"imbueOh",values:[{color:"grey",value:n.NoImbue},{actionId:e.fromSpellId(58804),value:n.WindfuryWeapon},{actionId:e.fromSpellId(58790),value:n.FlametongueWeapon},{actionId:e.fromSpellId(58789),value:n.FlametongueWeaponDownrank},{actionId:e.fromSpellId(58796),value:n.FrostbrandWeapon}]}),U=F({fieldName:"syncType",label:"Sync/Stagger Setting",labelTooltip:"Choose your sync or stagger option, Perfect Sync makes your weapons always attack at the same time, which is ideal for mixed imbues. Delayed Offhand is similar but additionally adds a slight delay to the offhand attacks while staying within the 0.5s flurry ICD window, ideal for matched imbues.",values:[{name:"None",value:t.NoSync},{name:"Perfect Sync",value:t.SyncMainhandOffhandSwings},{name:"Delayed Offhand",value:t.DelayOffhandSwings}]}),V={inputs:[N({fieldName:"primaryShock",label:"Primary Shock",values:[{name:"None",value:i.None},{name:"Earth Shock",value:i.Earth},{name:"Frost Shock",value:i.Frost}]}),E({fieldName:"weaveFlameShock",label:"Weave Flame Shock",labelTooltip:"Use Flame Shock whenever the target does not already have the DoT."}),E({fieldName:"lightningboltWeave",label:"Enable Weaving Lightning Bolt",labelTooltip:"Will provide a DPS increase, but is harder to execute",enableWhen:e=>e.getTalents().maelstromWeapon>0}),N({fieldName:"maelstromweaponMinStack",label:"Minimum Maelstrom Stacks to Weave",labelTooltip:"3 stacks is the most realistic, however there are cases where lower might be possible, just much harder to do in practice",values:[{name:"1",value:1},{name:"2",value:2},{name:"3",value:3},{name:"4",value:4}],enableWhen:e=>e.getRotation().lightningboltWeave}),R({fieldName:"weaveReactionTime",label:"Weaving Reaction Time",labelTooltip:"The Reaction time to gaining maelstrom stacks after a auto attack in milliseconds",enableWhen:e=>e.getRotation().lightningboltWeave}),E({fieldName:"lavaburstWeave",label:"Enable Weaving Lava Burst",labelTooltip:"Not particularily useful for dual wield, mostly a 2h option",enableWhen:e=>e.getRotation().lightningboltWeave}),R({fieldName:"firenovaManaThreshold",label:"Minimum mana to cast Fire Nova",labelTooltip:"Fire Nova will not be cast when mana is below this value. Set this medium-low, it has a bad mana-to-damage ratio"}),R({fieldName:"shamanisticRageManaThreshold",label:"Mana % to use Shamanistic Rage",enableWhen:e=>e.getTalents().shamanisticRage})]},X={name:"Standard",data:l.create({talentsString:"053030152-30405003105021333031131031051",glyphs:s.create({major1:o.GlyphOfStormstrike,major2:o.GlyphOfFlametongueWeapon,major3:o.GlyphOfFeralSpirit})})},$=r.create({totems:m.create({earth:d.StrengthOfEarthTotem,air:c.WindfuryTotem,fire:h.MagmaTotem,water:f.ManaSpringTotem}),maelstromweaponMinStack:3,lightningboltWeave:!0,weaveReactionTime:0,lavaburstWeave:!1,firenovaManaThreshold:3e3,shamanisticRageManaThreshold:25,primaryShock:i.Earth,weaveFlameShock:!0}),Q=u.create({shield:a.LightningShield,bloodlust:!0,imbueMh:n.WindfuryWeapon,imbueOh:n.FlametongueWeapon,syncType:t.SyncMainhandOffhandSwings}),Y=S.create({defaultPotion:p.PotionOfSpeed,flask:g.FlaskOfEndlessRage,food:b.FoodFishFeast}),Z=v.create({giftOfTheWild:y.TristateEffectImproved,arcaneBrilliance:!0,leaderOfThePack:y.TristateEffectImproved,totemOfWrath:!0,wrathOfAirTotem:!0,moonkinAura:y.TristateEffectImproved,sanctifiedRetribution:!0,divineSpirit:!0,battleShout:y.TristateEffectImproved}),ee=W.create({bloodFrenzy:!0,sunderArmor:!0,curseOfWeakness:y.TristateEffectRegular,curseOfElements:!0,faerieFire:y.TristateEffectImproved,judgementOfWisdom:!0,misery:!0,totemOfWrath:!0,shadowMastery:!0}),ae={name:"Preraid Preset",tooltip:A,gear:w.fromJsonString('{"items": [\n        {\n          "id": 43311,\n          "enchant": 44879,\n          "gems": [\n            41398,\n            42156\n          ]\n        },\n        {\n          "id": 40678\n        },\n        {\n          "id": 37373,\n          "enchant": 44871\n        },\n        {\n          "id": 37840,\n          "enchant": 55002\n        },\n        {\n          "id": 39597,\n          "enchant": 44489,\n          "gems": [\n            40053,\n            40088\n          ]\n        },\n        {\n          "id": 43131,\n          "enchant": 44484,\n          "gems": [\n            0\n          ]\n        },\n        {\n          "id": 39601,\n          "enchant": 54999,\n          "gems": [\n            40053,\n            0\n          ]\n        },\n        {\n          "id": 37407,\n          "gems": [\n            42156\n          ]\n        },\n        {\n          "id": 37669,\n          "enchant": 38374\n        },\n        {\n          "id": 37167,\n          "enchant": 55016,\n          "gems": [\n            40053,\n            42156\n          ]\n        },\n        {\n          "id": 37685\n        },\n        {\n          "id": 37642\n        },\n        {\n          "id": 37390\n        },\n        {\n          "id": 40684\n        },\n        {\n          "id": 41384,\n          "enchant": 44492\n        },\n        {\n          "id": 40704,\n          "enchant": 44492\n        },\n        {\n          "id": 37575\n        }\n    ]}')},ne={name:"P1 Preset",tooltip:A,gear:w.fromJsonString('{"items": [\n        {\n          "id": 40543,\n          "enchant": 44879,\n          "gems": [\n            41398,\n            40014\n          ]\n        },\n        {\n          "id": 44661,\n          "gems": [\n            40014\n          ]\n        },\n        {\n          "id": 40524,\n          "enchant": 44871,\n          "gems": [\n            40014\n          ]\n        },\n        {\n          "id": 40403,\n          "enchant": 55002\n        },\n        {\n          "id": 40523,\n          "enchant": 44489,\n          "gems": [\n            40003,\n            40014\n          ]\n        },\n        {\n          "id": 40282,\n          "enchant": 44484,\n          "gems": [\n            42702,\n            0\n          ]\n        },\n        {\n          "id": 40520,\n          "enchant": 54999,\n          "gems": [\n            42154,\n            0\n          ]\n        },\n        {\n          "id": 40275,\n          "gems": [\n            42156\n          ]\n        },\n        {\n          "id": 40522,\n          "enchant": 38374,\n          "gems": [\n            39999,\n            42156\n          ]\n        },\n        {\n          "id": 40367,\n          "enchant": 55016,\n          "gems": [\n            40058\n          ]\n        },\n        {\n          "id": 40474\n        },\n        {\n          "id": 40074\n        },\n        {\n          "id": 40684\n        },\n        {\n          "id": 37390\n        },\n        {\n          "id": 39763,\n          "enchant": 44492\n        },\n        {\n          "id": 39468,\n          "enchant": 44492\n        },\n        {\n          "id": 40322\n        }\n      ]}')};class te extends D{constructor(e,a){super(e,a,{cssClass:"enhancement-shaman-sim-ui",knownIssues:["Fire Elemental is in a alpha state","Some things regarding weapon imbues need further testing and changes"],epStats:[I.StatIntellect,I.StatAgility,I.StatStrength,I.StatAttackPower,I.StatMeleeHit,I.StatMeleeCrit,I.StatMeleeHaste,I.StatArmorPenetration,I.StatExpertise,I.StatSpellPower,I.StatSpellCrit,I.StatSpellHit],epReferenceStat:I.StatAttackPower,displayStats:[I.StatHealth,I.StatStamina,I.StatStrength,I.StatAgility,I.StatIntellect,I.StatAttackPower,I.StatMeleeHit,I.StatMeleeCrit,I.StatMeleeHaste,I.StatExpertise,I.StatArmorPenetration,I.StatSpellPower,I.StatNatureSpellPower,I.StatSpellHit,I.StatSpellCrit,I.StatSpellHaste],defaults:{gear:ne.gear,epWeights:T.fromMap({[I.StatIntellect]:1.517,[I.StatAgility]:1.561,[I.StatStrength]:1.1,[I.StatSpellPower]:1.117,[I.StatSpellHit]:0,[I.StatSpellCrit]:.897,[I.StatAttackPower]:1,[I.StatMeleeHit]:1.42,[I.StatMeleeCrit]:.805,[I.StatMeleeHaste]:1.37,[I.StatArmorPenetration]:.471,[I.StatExpertise]:0}),consumes:Y,rotation:$,talents:X.data,specOptions:Q,raidBuffs:Z,partyBuffs:k.create({}),individualBuffs:M.create({blessingOfKings:!0,blessingOfWisdom:y.TristateEffectImproved,blessingOfMight:y.TristateEffectImproved,judgementsOfTheWise:!0}),debuffs:ee},playerIconInputs:[J,q,z,K],rotationInputs:V,includeBuffDebuffInputs:[H,j,x,B],excludeBuffDebuffInputs:[C],otherInputs:{inputs:[U,_,L]},customSections:[G],encounterPicker:{showExecuteProportion:!1},presets:{talents:[X],gear:[ae,ne]}})}}export{$ as D,te as E,ne as P,X as S,Q as a,Y as b};
//# sourceMappingURL=sim-e67e9319.chunk.js.map
